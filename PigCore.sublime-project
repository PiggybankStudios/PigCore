{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.rdbg",
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"path": "third_party/stb",
			"name": "stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"path": "third_party/raylib",
			"name": "raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"path": "third_party/box2d",
			"name": "Box2D",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"path": "third_party/sokol",
			"name": "Sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"path": "third_party/handmade_math",
			"name": "HandmadeMath",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"path": "third_party/meow_hash",
			"name": "meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"path": "third_party/miniz",
			"name": "miniz",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
				"Changelog.md",
			],
		},
		{
			"path": "third_party/openvr",
			"name": "OpenVR SDK",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"ALPHA_ALL_CHARS",
			"ALPHA_LOWERCASE_CHARS",
			"ALPHA_UPPERCASE_CHARS",
			"ATTR_PACKED",
			"ArenaType_StackWasm",
			"Axis_All2",
			"Axis_All3",
			"Axis_All4",
			"Axis_Count",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BEIGE",
			"BLACK",
			"BLANK",
			"BLEND_ADDITIVE",
			"BLEND_ADD_COLORS",
			"BLEND_ALPHA",
			"BLEND_ALPHA_PREMULTIPLY",
			"BLEND_CUSTOM",
			"BLEND_CUSTOM_SEPARATE",
			"BLEND_MULTIPLIED",
			"BLEND_SUBTRACT_COLORS",
			"BLUE",
			"BROWN",
			"BUILD_SHADERS",
			"BUILD_WEB",
			"BUILD_WITH_OPENVR",
			"BUILD_WITH_RAYLIB",
			"BUILD_WITH_SOKOL",
			"CAMERA_CUSTOM",
			"CAMERA_FIRST_PERSON",
			"CAMERA_FREE",
			"CAMERA_ORBITAL",
			"CAMERA_ORTHOGRAPHIC",
			"CAMERA_PERSPECTIVE",
			"CAMERA_THIRD_PERSON",
			"CONVERT_WASM_TO_WAT",
			"CUBEMAP_LAYOUT_AUTO_DETECT",
			"CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE",
			"CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR",
			"CUBEMAP_LAYOUT_LINE_HORIZONTAL",
			"CUBEMAP_LAYOUT_LINE_VERTICAL",
			"DARKBLUE",
			"DARKBROWN",
			"DARKGRAY",
			"DARKGREEN",
			"DARKPURPLE",
			"DEBUG_OUTPUT_LINE_BUFFER_SIZE",
			"DEBUG_OUTPUT_PRINT_LEVEL_PREFIX",
			"DEG2RAD",
			"DUMP_PREPROCESSOR",
			"DbgLevel_Count",
			"DbgLevel_Debug",
			"DbgLevel_Error",
			"DbgLevel_Info",
			"DbgLevel_None",
			"DbgLevel_Notify",
			"DbgLevel_Other",
			"DbgLevel_Regular",
			"DbgLevel_Warning",
			"Dir2Ex_All",
			"Dir2Ex_BottomLeft",
			"Dir2Ex_BottomRight",
			"Dir2Ex_Cardinal",
			"Dir2Ex_Count",
			"Dir2Ex_Diagonal",
			"Dir2Ex_Down",
			"Dir2Ex_Left",
			"Dir2Ex_None",
			"Dir2Ex_Right",
			"Dir2Ex_TopLeft",
			"Dir2Ex_TopRight",
			"Dir2Ex_Up",
			"Dir2_All",
			"Dir2_Count",
			"Dir2_Down",
			"Dir2_Left",
			"Dir2_None",
			"Dir2_Right",
			"Dir2_Up",
			"Dir3_All",
			"Dir3_Backward",
			"Dir3_Count",
			"Dir3_Down",
			"Dir3_Forward",
			"Dir3_Left",
			"Dir3_None",
			"Dir3_NotBackward",
			"Dir3_NotDown",
			"Dir3_NotForward",
			"Dir3_NotLeft",
			"Dir3_NotRight",
			"Dir3_NotUp",
			"Dir3_Right",
			"Dir3_Up",
			"EMPTY_STRUCT",
			"ENABLE_AUTO_PROFILE",
			"END_EXTERN_C",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_EarlyInOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_LogTwoInCustom",
			"EasingStyle_LogTwoOutCustom",
			"EasingStyle_None",
			"EasingStyle_NumStyles",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"FLAG_BORDERLESS_WINDOWED_MODE",
			"FLAG_FULLSCREEN_MODE",
			"FLAG_INTERLACED_HINT",
			"FLAG_MSAA_4X_HINT",
			"FLAG_VSYNC_HINT",
			"FLAG_WINDOW_ALWAYS_RUN",
			"FLAG_WINDOW_HIDDEN",
			"FLAG_WINDOW_HIGHDPI",
			"FLAG_WINDOW_MAXIMIZED",
			"FLAG_WINDOW_MINIMIZED",
			"FLAG_WINDOW_MOUSE_PASSTHROUGH",
			"FLAG_WINDOW_RESIZABLE",
			"FLAG_WINDOW_TOPMOST",
			"FLAG_WINDOW_TRANSPARENT",
			"FLAG_WINDOW_UNDECORATED",
			"FLAG_WINDOW_UNFOCUSED",
			"FONT_BITMAP",
			"FONT_DEFAULT",
			"FONT_SDF",
			"FilePath_Empty",
			"GAMEPAD_AXIS_LEFT_TRIGGER",
			"GAMEPAD_AXIS_LEFT_X",
			"GAMEPAD_AXIS_LEFT_Y",
			"GAMEPAD_AXIS_RIGHT_TRIGGER",
			"GAMEPAD_AXIS_RIGHT_X",
			"GAMEPAD_AXIS_RIGHT_Y",
			"GAMEPAD_BUTTON_LEFT_FACE_DOWN",
			"GAMEPAD_BUTTON_LEFT_FACE_LEFT",
			"GAMEPAD_BUTTON_LEFT_FACE_RIGHT",
			"GAMEPAD_BUTTON_LEFT_FACE_UP",
			"GAMEPAD_BUTTON_LEFT_THUMB",
			"GAMEPAD_BUTTON_LEFT_TRIGGER_1",
			"GAMEPAD_BUTTON_LEFT_TRIGGER_2",
			"GAMEPAD_BUTTON_MIDDLE",
			"GAMEPAD_BUTTON_MIDDLE_LEFT",
			"GAMEPAD_BUTTON_MIDDLE_RIGHT",
			"GAMEPAD_BUTTON_RIGHT_FACE_DOWN",
			"GAMEPAD_BUTTON_RIGHT_FACE_LEFT",
			"GAMEPAD_BUTTON_RIGHT_FACE_RIGHT",
			"GAMEPAD_BUTTON_RIGHT_FACE_UP",
			"GAMEPAD_BUTTON_RIGHT_THUMB",
			"GAMEPAD_BUTTON_RIGHT_TRIGGER_1",
			"GAMEPAD_BUTTON_RIGHT_TRIGGER_2",
			"GAMEPAD_BUTTON_UNKNOWN",
			"GESTURE_DOUBLETAP",
			"GESTURE_DRAG",
			"GESTURE_HOLD",
			"GESTURE_NONE",
			"GESTURE_PINCH_IN",
			"GESTURE_PINCH_OUT",
			"GESTURE_SWIPE_DOWN",
			"GESTURE_SWIPE_LEFT",
			"GESTURE_SWIPE_RIGHT",
			"GESTURE_SWIPE_UP",
			"GESTURE_TAP",
			"GOLD",
			"GRAY",
			"GREEN",
			"HEX_ALL_CHARS",
			"HEX_LOWERCASE_CHARS",
			"HEX_UPPERCASE_CHARS",
			"HalfPi32",
			"HalfPi64",
			"KEY_A",
			"KEY_APOSTROPHE",
			"KEY_B",
			"KEY_BACK",
			"KEY_BACKSLASH",
			"KEY_BACKSPACE",
			"KEY_C",
			"KEY_CAPS_LOCK",
			"KEY_COMMA",
			"KEY_D",
			"KEY_DELETE",
			"KEY_DOWN",
			"KEY_E",
			"KEY_EIGHT",
			"KEY_END",
			"KEY_ENTER",
			"KEY_EQUAL",
			"KEY_ESCAPE",
			"KEY_F",
			"KEY_F1",
			"KEY_F10",
			"KEY_F11",
			"KEY_F12",
			"KEY_F2",
			"KEY_F3",
			"KEY_F4",
			"KEY_F5",
			"KEY_F6",
			"KEY_F7",
			"KEY_F8",
			"KEY_F9",
			"KEY_FIVE",
			"KEY_FOUR",
			"KEY_G",
			"KEY_GRAVE",
			"KEY_H",
			"KEY_HOME",
			"KEY_I",
			"KEY_INSERT",
			"KEY_J",
			"KEY_K",
			"KEY_KB_MENU",
			"KEY_KP_0",
			"KEY_KP_1",
			"KEY_KP_2",
			"KEY_KP_3",
			"KEY_KP_4",
			"KEY_KP_5",
			"KEY_KP_6",
			"KEY_KP_7",
			"KEY_KP_8",
			"KEY_KP_9",
			"KEY_KP_ADD",
			"KEY_KP_DECIMAL",
			"KEY_KP_DIVIDE",
			"KEY_KP_ENTER",
			"KEY_KP_EQUAL",
			"KEY_KP_MULTIPLY",
			"KEY_KP_SUBTRACT",
			"KEY_L",
			"KEY_LEFT",
			"KEY_LEFT_ALT",
			"KEY_LEFT_BRACKET",
			"KEY_LEFT_CONTROL",
			"KEY_LEFT_SHIFT",
			"KEY_LEFT_SUPER",
			"KEY_M",
			"KEY_MENU",
			"KEY_MINUS",
			"KEY_N",
			"KEY_NINE",
			"KEY_NULL",
			"KEY_NUM_LOCK",
			"KEY_O",
			"KEY_ONE",
			"KEY_P",
			"KEY_PAGE_DOWN",
			"KEY_PAGE_UP",
			"KEY_PAUSE",
			"KEY_PERIOD",
			"KEY_PRINT_SCREEN",
			"KEY_Q",
			"KEY_R",
			"KEY_RIGHT",
			"KEY_RIGHT_ALT",
			"KEY_RIGHT_BRACKET",
			"KEY_RIGHT_CONTROL",
			"KEY_RIGHT_SHIFT",
			"KEY_RIGHT_SUPER",
			"KEY_S",
			"KEY_SCROLL_LOCK",
			"KEY_SEMICOLON",
			"KEY_SEVEN",
			"KEY_SIX",
			"KEY_SLASH",
			"KEY_SPACE",
			"KEY_T",
			"KEY_TAB",
			"KEY_THREE",
			"KEY_TWO",
			"KEY_U",
			"KEY_UP",
			"KEY_V",
			"KEY_VOLUME_DOWN",
			"KEY_VOLUME_UP",
			"KEY_W",
			"KEY_X",
			"KEY_Y",
			"KEY_Z",
			"KEY_ZERO",
			"LIGHTGRAY",
			"LIME",
			"LOG_ALL",
			"LOG_DEBUG",
			"LOG_ERROR",
			"LOG_FATAL",
			"LOG_INFO",
			"LOG_NONE",
			"LOG_TRACE",
			"LOG_WARNING",
			"MAGENTA",
			"MAROON",
			"MATERIAL_MAP_ALBEDO",
			"MATERIAL_MAP_BRDF",
			"MATERIAL_MAP_CUBEMAP",
			"MATERIAL_MAP_DIFFUSE",
			"MATERIAL_MAP_EMISSION",
			"MATERIAL_MAP_HEIGHT",
			"MATERIAL_MAP_IRRADIANCE",
			"MATERIAL_MAP_METALNESS",
			"MATERIAL_MAP_NORMAL",
			"MATERIAL_MAP_OCCLUSION",
			"MATERIAL_MAP_PREFILTER",
			"MATERIAL_MAP_ROUGHNESS",
			"MATERIAL_MAP_SPECULAR",
			"MAX_DAYS_IN_MONTH",
			"MAX_NUM_VERT_ATTRIBUTES",
			"MEM_ARENA_DEBUG_NAMES",
			"MOUSE_BUTTON_BACK",
			"MOUSE_BUTTON_EXTRA",
			"MOUSE_BUTTON_FORWARD",
			"MOUSE_BUTTON_LEFT",
			"MOUSE_BUTTON_MIDDLE",
			"MOUSE_BUTTON_RIGHT",
			"MOUSE_BUTTON_SIDE",
			"MOUSE_CURSOR_ARROW",
			"MOUSE_CURSOR_CROSSHAIR",
			"MOUSE_CURSOR_DEFAULT",
			"MOUSE_CURSOR_IBEAM",
			"MOUSE_CURSOR_NOT_ALLOWED",
			"MOUSE_CURSOR_POINTING_HAND",
			"MOUSE_CURSOR_RESIZE_ALL",
			"MOUSE_CURSOR_RESIZE_EW",
			"MOUSE_CURSOR_RESIZE_NESW",
			"MOUSE_CURSOR_RESIZE_NS",
			"MOUSE_CURSOR_RESIZE_NWSE",
			"MOUSE_LEFT_BUTTON",
			"MOUSE_MIDDLE_BUTTON",
			"MOUSE_RIGHT_BUTTON",
			"NPATCH_NINE_PATCH",
			"NPATCH_THREE_PATCH_HORIZONTAL",
			"NPATCH_THREE_PATCH_VERTICAL",
			"NUM_DAYS_PER_4YEARS",
			"NUM_DAYS_PER_WEEK",
			"NUM_DAYS_PER_YEAR",
			"NUM_HOUR_PER_DAY",
			"NUM_LETTERS_IN_ENGLISH_ALPHABET",
			"NUM_MIN_PER_DAY",
			"NUM_MIN_PER_HOUR",
			"NUM_MIN_PER_WEEK",
			"NUM_MIN_PER_YEAR",
			"NUM_MONOKAI_COLORS",
			"NUM_MS_PER_DAY",
			"NUM_MS_PER_HOUR",
			"NUM_MS_PER_MINUTE",
			"NUM_MS_PER_SECOND",
			"NUM_MS_PER_WEEK",
			"NUM_MS_PER_YEAR",
			"NUM_SCRATCH_ARENAS_PER_THREAD",
			"NUM_SEC_PER_DAY",
			"NUM_SEC_PER_HOUR",
			"NUM_SEC_PER_MINUTE",
			"NUM_SEC_PER_WEEK",
			"NUM_SEC_PER_YEAR",
			"NUM_US_PER_DAY",
			"NUM_US_PER_HOUR",
			"NUM_US_PER_MINUTE",
			"NUM_US_PER_MS",
			"NUM_US_PER_SECOND",
			"ORANGE",
			"PI",
			"PINK",
			"PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
			"PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
			"PIXELFORMAT_COMPRESSED_DXT1_RGB",
			"PIXELFORMAT_COMPRESSED_DXT1_RGBA",
			"PIXELFORMAT_COMPRESSED_DXT3_RGBA",
			"PIXELFORMAT_COMPRESSED_DXT5_RGBA",
			"PIXELFORMAT_COMPRESSED_ETC1_RGB",
			"PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
			"PIXELFORMAT_COMPRESSED_ETC2_RGB",
			"PIXELFORMAT_COMPRESSED_PVRT_RGB",
			"PIXELFORMAT_COMPRESSED_PVRT_RGBA",
			"PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
			"PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
			"PIXELFORMAT_UNCOMPRESSED_R16",
			"PIXELFORMAT_UNCOMPRESSED_R16G16B16",
			"PIXELFORMAT_UNCOMPRESSED_R16G16B16A16",
			"PIXELFORMAT_UNCOMPRESSED_R32",
			"PIXELFORMAT_UNCOMPRESSED_R32G32B32",
			"PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
			"PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
			"PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
			"PIXELFORMAT_UNCOMPRESSED_R5G6B5",
			"PIXELFORMAT_UNCOMPRESSED_R8G8B8",
			"PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
			"PURPLE",
			"Pi32",
			"Pi64",
			"QuarterPi32",
			"QuarterPi64",
			"RAD2DEG",
			"RAYLIB_VERSION",
			"RAYLIB_VERSION_MAJOR",
			"RAYLIB_VERSION_MINOR",
			"RAYLIB_VERSION_PATCH",
			"RAYWHITE",
			"RED",
			"RL_BOOL_TYPE",
			"RL_COLOR_TYPE",
			"RL_MATRIX_TYPE",
			"RL_QUATERNION_TYPE",
			"RL_RECTANGLE_TYPE",
			"RL_VECTOR2_TYPE",
			"RL_VECTOR3_TYPE",
			"RL_VECTOR4_TYPE",
			"RandomSeriesType_Fixed",
			"RandomSeriesType_Incremental",
			"RandomSeriesType_LinearCongruential32",
			"RandomSeriesType_LinearCongruential64",
			"RandomSeriesType_None",
			"RandomSeriesType_NumTypes",
			"RandomSeriesType_PermutedCongruential64",
			"RandomSeriesType_XoroShiro128",
			"Result_Count",
			"Result_EmptyPath",
			"Result_ExePathTooLong",
			"Result_FailedToAllocateMemory",
			"Result_FailedToReadFile",
			"Result_Failure",
			"Result_Finished",
			"Result_None",
			"Result_ParsingFailure",
			"Result_SokolError",
			"Result_Success",
			"Result_Unknown",
			"Result_UnsupportedPlatform",
			"SCRATCH_ARENAS_THREAD_LOCAL",
			"SHADER_ATTRIB_FLOAT",
			"SHADER_ATTRIB_VEC2",
			"SHADER_ATTRIB_VEC3",
			"SHADER_ATTRIB_VEC4",
			"SHADER_LOC_BONE_MATRICES",
			"SHADER_LOC_COLOR_AMBIENT",
			"SHADER_LOC_COLOR_DIFFUSE",
			"SHADER_LOC_COLOR_SPECULAR",
			"SHADER_LOC_MAP_ALBEDO",
			"SHADER_LOC_MAP_BRDF",
			"SHADER_LOC_MAP_CUBEMAP",
			"SHADER_LOC_MAP_DIFFUSE",
			"SHADER_LOC_MAP_EMISSION",
			"SHADER_LOC_MAP_HEIGHT",
			"SHADER_LOC_MAP_IRRADIANCE",
			"SHADER_LOC_MAP_METALNESS",
			"SHADER_LOC_MAP_NORMAL",
			"SHADER_LOC_MAP_OCCLUSION",
			"SHADER_LOC_MAP_PREFILTER",
			"SHADER_LOC_MAP_ROUGHNESS",
			"SHADER_LOC_MAP_SPECULAR",
			"SHADER_LOC_MATRIX_MODEL",
			"SHADER_LOC_MATRIX_MVP",
			"SHADER_LOC_MATRIX_NORMAL",
			"SHADER_LOC_MATRIX_PROJECTION",
			"SHADER_LOC_MATRIX_VIEW",
			"SHADER_LOC_VECTOR_VIEW",
			"SHADER_LOC_VERTEX_BONEIDS",
			"SHADER_LOC_VERTEX_BONEWEIGHTS",
			"SHADER_LOC_VERTEX_COLOR",
			"SHADER_LOC_VERTEX_NORMAL",
			"SHADER_LOC_VERTEX_POSITION",
			"SHADER_LOC_VERTEX_TANGENT",
			"SHADER_LOC_VERTEX_TEXCOORD01",
			"SHADER_LOC_VERTEX_TEXCOORD02",
			"SHADER_UNIFORM_FLOAT",
			"SHADER_UNIFORM_INT",
			"SHADER_UNIFORM_IVEC2",
			"SHADER_UNIFORM_IVEC3",
			"SHADER_UNIFORM_IVEC4",
			"SHADER_UNIFORM_SAMPLER2D",
			"SHADER_UNIFORM_VEC2",
			"SHADER_UNIFORM_VEC3",
			"SHADER_UNIFORM_VEC4",
			"SKYBLUE",
			"START_EXTERN_C",
			"Slice_Empty",
			"Slice_Empty_Const",
			"Sqrt2_32",
			"Sqrt2_64",
			"Str16_Empty",
			"Str16_Empty_Const",
			"Str8Pair_Empty",
			"Str8Pair_Empty_Const",
			"Str8_Empty",
			"Str8_Empty_Const",
			"TEXTURE_FILTER_ANISOTROPIC_16X",
			"TEXTURE_FILTER_ANISOTROPIC_4X",
			"TEXTURE_FILTER_ANISOTROPIC_8X",
			"TEXTURE_FILTER_BILINEAR",
			"TEXTURE_FILTER_POINT",
			"TEXTURE_FILTER_TRILINEAR",
			"TEXTURE_WRAP_CLAMP",
			"TEXTURE_WRAP_MIRROR_CLAMP",
			"TEXTURE_WRAP_MIRROR_REPEAT",
			"TEXTURE_WRAP_REPEAT",
			"ThirdPi32",
			"ThirdPi64",
			"ThreeHalfsPi32",
			"ThreeHalfsPi64",
			"TwoPi32",
			"TwoPi64",
			"UCS2_MAX_CHAR_SIZE",
			"UNICODE_CYRILLIC_COUNT",
			"UNICODE_CYRILLIC_END",
			"UNICODE_CYRILLIC_START",
			"UNICODE_HIRAGANA_COUNT",
			"UNICODE_HIRAGANA_END",
			"UNICODE_HIRAGANA_START",
			"UNICODE_KATAKANA_COUNT",
			"UNICODE_KATAKANA_END",
			"UNICODE_KATAKANA_START",
			"UNICODE_LATIN_EXT_COUNT",
			"UNICODE_LATIN_EXT_END",
			"UNICODE_LATIN_EXT_START",
			"UNIX_EPOCH_DATE",
			"UNKNOWN_STR",
			"UTF8_MAX_CHAR_SIZE",
			"UTF8_MAX_CODEPOINT",
			"VAR_ARRAY_CLEAR_ITEMS_ON_ADD",
			"VAR_ARRAY_CLEAR_ITEM_BYTE_VALUE",
			"VAR_ARRAY_DEBUG_INFO",
			"VAR_ARRAY_MIN_SIZE",
			"VIOLET",
			"VertAttributeType_Color",
			"VertAttributeType_Count",
			"VertAttributeType_None",
			"VertAttributeType_Normal",
			"VertAttributeType_Position",
			"VertAttributeType_Tangent",
			"VertAttributeType_TexCoord",
			"VertBufferUsage_Count",
			"VertBufferUsage_Dynamic",
			"VertBufferUsage_None",
			"VertBufferUsage_Static",
			"VertBufferUsage_Streaming",
			"Vertex2D_NumFloats",
			"Vertex2D_Size",
			"Vertex2D_Zero",
			"Vertex2D_Zero_Const",
			"Vertex3D_NumFloats",
			"Vertex3D_Size",
			"Vertex3D_Zero",
			"Vertex3D_Zero_Const",
			"WHITE",
			"WHITESPACE_CHARS",
			"WHITESPACE_CHARS_EX",
			"WIN32_FILETIME_SEC_OFFSET",
			"YELLOW",
			"ZEROED",
			"__func__",
			"e32",
			"e64",
		],
		"custom_functions":
		[
			"#define ALLOC_FUNC_DEF(functionName)",
			"#define AllocArray(type, arenaPntr, count)",
			"#define AllocArrayUnaligned(type, arenaPntr, count)",
			"#define AllocStr8(arenaPntr, string)",
			"#define AllocStr8Length(arenaPntr, length, charPntr)",
			"#define AllocStr8Nt(arenaPntr, nullTermStr)",
			"#define AllocType(type, arenaPntr)",
			"#define AllocTypeUnaligned(type, arenaPntr)",
			"#define AreEqual(left, right)",
			"#define ArrayCount(Array)",
			"#define AsFilePath(string)",
			"#define Assert(condition)",
			"#define AssertMsg(condition, message)",
			"#define AssertNullTerm(string)",
			"#define COORD3D_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define COORD3D_X_FROM_INDEX(voxelIndex, arrayWidth)",
			"#define COORD3D_Y_FROM_INDEX(voxelIndex, arrayWidth, arrayDepth)",
			"#define COORD3D_Z_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define ClearArray(Array)",
			"#define ClearPointer(Pointer)",
			"#define ClearStruct(Structure)",
			"#define DEBUG_USED(varName)",
			"#define DebugAssert(condition)",
			"#define DebugAssertMsg(condition, message)",
			"#define DebugAssertNullTerm(string)",
			"#define DebugNotEmptyStr(string)",
			"#define DebugNotEmptyStrPntr(stringPntr)",
			"#define DebugNotNull(variable)",
			"#define DebugNotNullStr(string)",
			"#define DebugNotNullStrPntr(stringPntr)",
			"#define DebugStaticAssert(condition)",
			"#define Decrement(variable)",
			"#define DecrementBy(variable, amount)",
			"#define END_PACK()",
			"#define EXPORT(returnType, functionName, ...)",
			"#define FREE_FUNC_DEF(functionName)",
			"#define FilePathLit(nullTermStr)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define FlipEndianU32(variable)",
			"#define FreeFilePath(arenaPntr, pathPntr)",
			"#define FreeFilePathWithNt(arenaPntr, pathPntr)",
			"#define Gigabytes(value)",
			"#define IMPORT(returnType, functionName, ...)",
			"#define INDEX_FROM_COORD3D(coordX, coordY, coordZ, arrayWidth, arrayHeight, arrayDepth)",
			"#define IS_VAR_IN_X_BYTES_OF_STRUCT(structureName, numBytes, variableName)",
			"#define Increment(variable, max)",
			"#define IncrementBy(variable, amount, max)",
			"#define IncrementU16(variable)",
			"#define IncrementU16By(variable, amount)",
			"#define IncrementU32(variable)",
			"#define IncrementU32By(variable, amount)",
			"#define IncrementU64(variable)",
			"#define IncrementU64By(variable, amount)",
			"#define IncrementU8(variable)",
			"#define IncrementU8By(variable, amount)",
			"#define IncrementUXX(variable)",
			"#define IncrementUXXBy(variable, amount)",
			"#define InitCompiledShader(outputShaderPntr, arenaPntr, shaderName)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define Kilobytes(value)",
			"#define Lerp(left, right, amount)",
			"#define Megabytes(value)",
			"#define MyFree(pntr)",
			"#define MyMalloc(numBytes)",
			"#define MyMallocType(numBytes)",
			"#define MyMemCompare(pntr1, pntr2, length)",
			"#define MyMemCopy(dest, source, length)",
			"#define MyMemEquals(pntr1, pntr2, length)",
			"#define MyMemMove(dest, source, length)",
			"#define MyMemSet(dest, value, length)",
			"#define MyRealloc(pntr, numBytes)",
			"#define MyStrCompare(str1, str2, length)",
			"#define MyStrCompareNt(str1, str2)",
			"#define MyStrCopyNt(dest, source)",
			"#define MyStrLength(str)",
			"#define MyStrLength32(str)",
			"#define MyStrLength64(str)",
			"#define MyStrStrNt(str1, str2)",
			"#define MyWideStrLength(str)",
			"#define MyWideStrLength32(str)",
			"#define NewFilePath(length, pntr)",
			"#define NotEmptyStr(string)",
			"#define NotEmptyStrPntr(stringPntr)",
			"#define NotNull(variable)",
			"#define NotNullStr(string)",
			"#define NotNullStrPntr(stringPntr)",
			"#define OnesComplimentU32(variable)",
			"#define PACKED(class_to_pack)",
			"#define Plural(number, multipleSuffix)",
			"#define PluralEx(number, singularSuffix, multipleSuffix)",
			"#define PrintInArenaVa(arena, resultName, resultLengthName, formatString)",
			"#define PrintLine_D(formatString, ...)",
			"#define PrintLine_E(formatString, ...)",
			"#define PrintLine_I(formatString, ...)",
			"#define PrintLine_N(formatString, ...)",
			"#define PrintLine_O(formatString, ...)",
			"#define PrintLine_R(formatString, ...)",
			"#define PrintLine_W(formatString, ...)",
			"#define Print_D(formatString, ...)",
			"#define Print_E(formatString, ...)",
			"#define Print_I(formatString, ...)",
			"#define Print_N(formatString, ...)",
			"#define Print_O(formatString, ...)",
			"#define Print_R(formatString, ...)",
			"#define Print_W(formatString, ...)",
			"#define REALLOC_FUNC_DEF(functionName)",
			"#define START_PACK()",
			"#define STRINGIFY(text)",
			"#define STRINGIFY_DEFINE(define)",
			"#define STRUCT_VAR_END_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_SIZE(structureName, variableName)",
			"#define ScratchBegin(variableName)",
			"#define ScratchBegin1(variableName, conflict1)",
			"#define ScratchBegin2(variableName, conflict1, conflict2)",
			"#define ScratchEnd(variableName)",
			"#define SetOptionalOutPntr(outputPntr, value)",
			"#define StrPntrPrint(strPntr)",
			"#define StrPrint(string)",
			"#define SwapPointers(varType, pntr1, pntr2)",
			"#define Terabytes(value)",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define UNREFERENCED(varName)",
			"#define UNUSED(varName)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"#define WriteLine_D(message)",
			"#define WriteLine_E(message)",
			"#define WriteLine_I(message)",
			"#define WriteLine_N(message)",
			"#define WriteLine_O(message)",
			"#define WriteLine_R(message)",
			"#define WriteLine_W(message)",
			"#define Write_D(message)",
			"#define Write_E(message)",
			"#define Write_I(message)",
			"#define Write_N(message)",
			"#define Write_O(message)",
			"#define Write_R(message)",
			"#define Write_W(message)",
			"Arena* GetScratch(uxx* markOut)",
			"Arena* GetScratch1(Arena* conflict1, uxx* markOut)",
			"Arena* GetScratch2(Arena* conflict1, Arena* conflict2, uxx* markOut)",
			"AudioStream LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels)",
			"AutomationEventList LoadAutomationEventList(const char *fileName)",
			"BoundingBox GetMeshBoundingBox(Mesh mesh)",
			"BoundingBox GetModelBoundingBox(Model model)",
			"CLITERAL(type)",
			"Color *LoadImageColors(Image image)",
			"Color *LoadImagePalette(Image image, int maxPaletteSize, int *colorCount)",
			"Color ColorAlpha(Color color, float alpha)",
			"Color ColorAlphaBlend(Color dst, Color src, Color tint)",
			"Color ColorBrightness(Color color, float factor)",
			"Color ColorContrast(Color color, float contrast)",
			"Color ColorFromHSV(float hue, float saturation, float value)",
			"Color ColorFromNormalized(Vector4 normalized)",
			"Color ColorLerp(Color color1, Color color2, float factor)",
			"Color ColorTint(Color color, Color tint)",
			"Color Fade(Color color, float alpha)",
			"Color GetColor(unsigned int hexValue)",
			"Color GetImageColor(Image image, int x, int y)",
			"Color GetMonokaiColorByIndex(uxx index)",
			"Color GetPixelColor(void *srcPtr, int format)",
			"Color GetPredefPalColorByIndex(uxx index)",
			"Color NewColor(u8 red, u8 green, u8 blue, u8 alpha)",
			"Color NewColorU32(u32 valueU32)",
			"Dir2 ToDir2(Axis axis, bool positive)",
			"Dir3 ToDir3(Axis axis, bool positive)",
			"FilePath GetFileFolderPart(FilePath path)",
			"FilePath OsGetExecutablePath(Arena* arena, Result* resultOut)",
			"FilePath OsGetFullPath(Arena* arena, FilePath relativePath)",
			"FilePath OsGetWorkingDirectory(Arena* arena, Result* resultOut)",
			"FilePathList LoadDirectoryFiles(const char *dirPath)",
			"FilePathList LoadDirectoryFilesEx(const char *basePath, const char *filter, bool scanSubdirs)",
			"FilePathList LoadDroppedFiles(void)",
			"Font GetFontDefault(void)",
			"Font LoadFont(const char *fileName)",
			"Font LoadFontEx(const char *fileName, int fontSize, int *codepoints, int codepointCount)",
			"Font LoadFontFromImage(Image image, Color key, int firstChar)",
			"Font LoadFontFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount)",
			"GlyphInfo *LoadFontData(const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount, int type)",
			"GlyphInfo GetGlyphInfo(Font font, int codepoint)",
			"Image GenImageCellular(int width, int height, int tileSize)",
			"Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2)",
			"Image GenImageColor(int width, int height, Color color)",
			"Image GenImageFontAtlas(const GlyphInfo *glyphs, Rectangle **glyphRecs, int glyphCount, int fontSize, int padding, int packMethod)",
			"Image GenImageGradientLinear(int width, int height, int direction, Color start, Color end)",
			"Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer)",
			"Image GenImageGradientSquare(int width, int height, float density, Color inner, Color outer)",
			"Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale)",
			"Image GenImageText(int width, int height, const char *text)",
			"Image GenImageWhiteNoise(int width, int height, float factor)",
			"Image GetClipboardImage(void)",
			"Image ImageCopy(Image image)",
			"Image ImageFromChannel(Image image, int selectedChannel)",
			"Image ImageFromImage(Image image, Rectangle rec)",
			"Image ImageText(const char *text, int fontSize, Color color)",
			"Image ImageTextEx(Font font, const char *text, float fontSize, float spacing, Color tint)",
			"Image LoadImage(const char *fileName)",
			"Image LoadImageAnim(const char *fileName, int *frames)",
			"Image LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int *frames)",
			"Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize)",
			"Image LoadImageFromScreen(void)",
			"Image LoadImageFromTexture(Texture2D texture)",
			"Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize)",
			"Material *LoadMaterials(const char *fileName, int *materialCount)",
			"Material LoadMaterialDefault(void)",
			"Matrix GetCameraMatrix(Camera camera)",
			"Matrix GetCameraMatrix2D(Camera2D camera)",
			"Mesh GenMeshCone(float radius, float height, int slices)",
			"Mesh GenMeshCube(float width, float height, float length)",
			"Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize)",
			"Mesh GenMeshCylinder(float radius, float height, int slices)",
			"Mesh GenMeshHeightmap(Image heightmap, Vector3 size)",
			"Mesh GenMeshHemiSphere(float radius, int rings, int slices)",
			"Mesh GenMeshKnot(float radius, float size, int radSeg, int sides)",
			"Mesh GenMeshPlane(float width, float length, int resX, int resZ)",
			"Mesh GenMeshPoly(int sides, float radius)",
			"Mesh GenMeshSphere(float radius, int rings, int slices)",
			"Mesh GenMeshTorus(float radius, float size, int radSeg, int sides)",
			"Model LoadModel(const char *fileName)",
			"Model LoadModelFromMesh(Mesh mesh)",
			"ModelAnimation *LoadModelAnimations(const char *fileName, int *animCount)",
			"Music LoadMusicStream(const char *fileName)",
			"Music LoadMusicStreamFromMemory(const char *fileType, const unsigned char *data, int dataSize)",
			"NODISCARD FilePath AllocFilePath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"NODISCARD FilePath AllocFolderPath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"NODISCARD void* AllocMem(Arena* arena, uxx numBytes)",
			"OsFileIter OsIterateFiles(Arena* arena, FilePath path, bool includeFiles, bool includeFolders)",
			"PEXP FilePath GetZipArchiveFilePath(ZipArchive* archive, Arena* pathArena, uxx fileIndex)",
			"PEXP Result OpenZipArchive(Arena* arena, Slice zipFileContents, ZipArchive* archiveOut)",
			"PEXP Result OpenZipArchivePath(Arena* arena, FilePath filePath, ZipArchive* archiveOut)",
			"PEXP Result TryLoadImageFromPath(FilePath path, Arena* arena, ImageData* imageDataOut)",
			"PEXP Slice OpenZipArchiveAndReadFile(Arena* fileContentsArena, Slice zipFileContents, Str8 fileName)",
			"PEXP Slice OpenZipArchivePathAndReadFile(Arena* fileContentsArena, FilePath zipFilePath, FilePath archiveFileName, bool convertNewLines)",
			"PEXP Slice ReadZipArchiveFileAtIndex(ZipArchive* archive, Arena* fileContentsArena, uxx fileIndex)",
			"PEXP Str8 StrExactContains(Str8 haystack, Str8 needle)",
			"PEXP VertBuffer InitVertBufferEx(Arena* arena, uxx verticesSize, const void* verticesPntr, uxx numAttributes, const VertAttribute* attributes, bool makeCopy)",
			"PEXP bool FindZipArchiveFileNamed(ZipArchive* archive, Str8 fileName, uxx* fileIndexOut)",
			"PEXP u64 OsGetCurrentTimestampEx(bool local, i64* timezoneOffsetOut, bool* timezoneDoesDstOut) ",
			"PEXP void CloseZipArchive(ZipArchive* archive)",
			"PEXP void FillPipelineDescLayout(sg_pipeline_desc* pipelineDesc, const Shader* shader, const VertBuffer* bufferRef)",
			"PEXP void FreeShader(Shader* shader)",
			"PEXP void FreeVertBuffer(VertBuffer* buffer)",
			"PEXPI Color32 ToColor32FromV4r(v4r vector)",
			"PEXPI Slice ReadZipArchiveFile(ZipArchive* archive, Arena* fileContentsArena, Str8 fileName)",
			"PEXPI Str8 StrAnyCaseEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"PEXPI Str8 StrExactEndsWith(Str8 target, Str8 suffix)",
			"PEXPI Str8 StrExactEquals(Str8 left, Str8 right)",
			"PEXPI Str8 StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"PEXPI Str8 StrExactStartsWith(Str8 target, Str8 prefix)",
			"PEXPI Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"PEXPI Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"PEXPI Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"PEXPI bool StrAnyCaseContains(Str8 haystack, Str8 needle)",
			"PEXPI bool StrAnyCaseEndsWith(Str8 target, Str8 suffix)",
			"PEXPI bool StrAnyCaseEquals(Str8 left, Str8 right)",
			"PEXPI bool StrAnyCaseStartsWith(Str8 target, Str8 prefix)",
			"PEXPI bool StrContains(Str8 haystack, Str8 needle, bool caseSensitive)",
			"PEXPI bool StrEndsWith(Str8 target, Str8 suffix, bool caseSensitive)",
			"PEXPI bool StrEquals(Str8 left, Str8 right, bool caseSensitive)",
			"PEXPI bool StrEqualsAt(Str8 left, Str8 right, uxx leftIndex, bool caseSensitive)",
			"PEXPI bool StrStartsWith(Str8 target, Str8 prefix, bool caseSensitive)",
			"PEXPI u64 OsGetCurrentTimestamp(bool local)",
			"PEXPI u8 ClampCastI32ToU8(i32 value)",
			"PEXPI v4 ToV4Fromr(v4r vec4r)",
			"PEXPI v4r ToV4rFrom4(v4 vec4)",
			"PEXPI v4r ToV4rFromColor32(Color32 color)",
			"PEXPI void BindVertBuffer(sg_bindings* bindings, VertBuffer* buffer, uxx bufferIndex)",
			"PEXPI void PipelineAttributesFromVertBuffer(sg_pipeline_desc* pipelineDesc, const VertBuffer* buffer)",
			"PIG_CORE_INLINE v4r NewV4r(r32 x, r32 y, r32 z, r32 w)",
			"RL_CALLOC(n,sz)",
			"RL_FREE(ptr)",
			"RL_MALLOC(sz)",
			"RL_REALLOC(ptr,sz)",
			"Ray GetScreenToWorldRay(Vector2 position, Camera camera)",
			"Ray GetScreenToWorldRayEx(Vector2 position, Camera camera, int width, int height)",
			"RayCollision GetRayCollisionBox(Ray ray, BoundingBox box)",
			"RayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform)",
			"RayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4)",
			"RayCollision GetRayCollisionSphere(Ray ray, Vector3 center, float radius)",
			"RayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3)",
			"Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2)",
			"Rectangle GetGlyphAtlasRec(Font font, int codepoint)",
			"Rectangle GetImageAlphaBorder(Image image, float threshold)",
			"Rectangle GetShapesTextureRectangle(void)",
			"RenderTexture2D LoadRenderTexture(int width, int height)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"ScratchArena GetScratchArena()",
			"ScratchArena GetScratchArena1(Arena* conflict1)",
			"ScratchArena GetScratchArena2(Arena* conflict1, Arena* conflict2)",
			"Shader InitShader(Arena* arena, const sg_shader_desc* shaderDesc, Str8 filePath)",
			"Shader LoadShader(const char *vsFileName, const char *fsFileName)",
			"Shader LoadShaderFromMemory(const char *vsCode, const char *fsCode)",
			"Sound LoadSound(const char *fileName)",
			"Sound LoadSoundAlias(Sound source)",
			"Sound LoadSoundFromWave(Wave wave)",
			"Str16 ConvertUtf8StrToUcs2(Arena* arena, Str8 utf8Str, bool addNullTerm)",
			"Str16 Str16Lit(const char16_t* nullTermStr)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 ConvertUcs2StrToUtf8(Arena* arena, Str16 usc2Str, bool addNullTerm)",
			"Str8 GetFileExtPart(FilePath path, bool includeSubExtensions, bool includeLeadingPeriod)",
			"Str8 GetFileNamePart(FilePath path, bool includeExtension)",
			"Str8 GetPathPart(FilePath path, ixx partIndex, bool includeEmptyBeginOrEnd)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 NewStr8(uxx length, const void* pntr)",
			"Str8 OsReadBinFileScratch(FilePath path)",
			"Str8 OsReadTextFileScratch(FilePath path)",
			"Str8 PrintInArenaStr(Arena* arena, const char* formatString, ...)",
			"Str8 StrLit(const char* nullTermStr)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 TrimLeadingWhitespace(Str8 target)",
			"Str8 TrimTrailingWhitespace(Str8 target)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8Pair NewStr8Pair(Str8 left, Str8 right)",
			"Texture2D GetShapesTexture(void)",
			"Texture2D LoadTexture(const char *fileName)",
			"Texture2D LoadTextureFromImage(Image image)",
			"TextureCubemap LoadTextureCubemap(Image image, int layout)",
			"Vector2 GetGestureDragVector(void)",
			"Vector2 GetGesturePinchVector(void)",
			"Vector2 GetMonitorPosition(int monitor)",
			"Vector2 GetMouseDelta(void)",
			"Vector2 GetMousePosition(void)",
			"Vector2 GetMouseWheelMoveV(void)",
			"Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera)",
			"Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)",
			"Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t)",
			"Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t)",
			"Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)",
			"Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t)",
			"Vector2 GetTouchPosition(int index)",
			"Vector2 GetWindowPosition(void)",
			"Vector2 GetWindowScaleDPI(void)",
			"Vector2 GetWorldToScreen(Vector3 position, Camera camera)",
			"Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera)",
			"Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height)",
			"Vector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing)",
			"Vector3 ColorToHSV(Color color)",
			"Vector4 ColorNormalize(Color color)",
			"VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device)",
			"Wave LoadWave(const char *fileName)",
			"Wave LoadWaveFromMemory(const char *fileType, const unsigned char *fileData, int dataSize)",
			"Wave WaveCopy(Wave wave)",
			"bool BOOL_FUNC_DEF()",
			"bool CanArenaAllocAligned(const Arena* arena)",
			"bool CanArenaCheckPntrFromArena(const Arena* arena)",
			"bool CanArenaFree(const Arena* arena)",
			"bool CanArenaGetSize(const Arena* arena)",
			"bool CanArenaVerifyIntegrity(const Arena* arena)",
			"bool ChangeDirectory(const char *dir)",
			"bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius)",
			"bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2)",
			"bool CheckCollisionCircleLine(Vector2 center, float radius, Vector2 p1, Vector2 p2)",
			"bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec)",
			"bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2)",
			"bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint)",
			"bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius)",
			"bool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold)",
			"bool CheckCollisionPointPoly(Vector2 point, const Vector2 *points, int pointCount)",
			"bool CheckCollisionPointRec(Vector2 point, Rectangle rec)",
			"bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3)",
			"bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2)",
			"bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2)",
			"bool ColorIsEqual(Color col1, Color col2)",
			"bool DirectoryExists(const char *dirPath)",
			"bool DoesNtStrContainMultibyteUtf8Chars(const char* nullTermStr)",
			"bool DoesPathHaveExt(FilePath path)",
			"bool DoesPathHaveTrailingSlash(FilePath path)",
			"bool DoesStrContainMultibyteUtf8Characters(Str8 str)",
			"bool ExportAutomationEventList(AutomationEventList list, const char *fileName)",
			"bool ExportDataAsCode(const unsigned char *data, int dataSize, const char *fileName)",
			"bool ExportFontAsCode(Font font, const char *fileName)",
			"bool ExportImage(Image image, const char *fileName)",
			"bool ExportImageAsCode(Image image, const char *fileName)",
			"bool ExportMesh(Mesh mesh, const char *fileName)",
			"bool ExportMeshAsCode(Mesh mesh, const char *fileName)",
			"bool ExportWave(Wave wave, const char *fileName)",
			"bool ExportWaveAsCode(Wave wave, const char *fileName)",
			"bool FileExists(const char *fileName)",
			"bool FindNextWhitespaceInStr(Str8 target, uxx startIndex)",
			"bool IsAudioDeviceReady(void)",
			"bool IsAudioStreamPlaying(AudioStream stream)",
			"bool IsAudioStreamProcessed(AudioStream stream)",
			"bool IsAudioStreamValid(AudioStream stream)",
			"bool IsBufferNullTerminated(uxx bufferSize, const void* bufferPntr)",
			"bool IsCursorHidden(void)",
			"bool IsCursorOnScreen(void)",
			"bool IsFileDropped(void)",
			"bool IsFileExtension(const char *fileName, const char *ext)",
			"bool IsFileNameValid(const char *fileName)",
			"bool IsFontValid(Font font)",
			"bool IsGamepadAvailable(int gamepad)",
			"bool IsGamepadButtonDown(int gamepad, int button)",
			"bool IsGamepadButtonPressed(int gamepad, int button)",
			"bool IsGamepadButtonReleased(int gamepad, int button)",
			"bool IsGamepadButtonUp(int gamepad, int button)",
			"bool IsGestureDetected(unsigned int gesture)",
			"bool IsImageValid(Image image)",
			"bool IsInfiniteR32(r32 value)",
			"bool IsInfiniteR64(r64 value)",
			"bool IsKeyDown(int key)",
			"bool IsKeyPressed(int key)",
			"bool IsKeyPressedRepeat(int key)",
			"bool IsKeyReleased(int key)",
			"bool IsKeyUp(int key)",
			"bool IsMaterialValid(Material material)",
			"bool IsModelAnimationValid(Model model, ModelAnimation anim)",
			"bool IsModelValid(Model model)",
			"bool IsMouseButtonDown(int button)",
			"bool IsMouseButtonPressed(int button)",
			"bool IsMouseButtonReleased(int button)",
			"bool IsMouseButtonUp(int button)",
			"bool IsMusicStreamPlaying(Music music)",
			"bool IsMusicValid(Music music)",
			"bool IsPathFile(const char *path)",
			"bool IsPntrFromArena(const Arena* arena, const void* allocPntr)",
			"bool IsRenderTextureValid(RenderTexture2D target)",
			"bool IsShaderValid(Shader shader)",
			"bool IsSoundPlaying(Sound sound)",
			"bool IsSoundValid(Sound sound)",
			"bool IsTextureValid(Texture2D texture)",
			"bool IsValidIdentifier(uxx strLength, const char* strPntr, bool allowEmpty, bool allowDashes, bool allowSpaces)",
			"bool IsVarArrayInit(const VarArray* array)",
			"bool IsWaveValid(Wave wave)",
			"bool IsWindowFocused(void)",
			"bool IsWindowFullscreen(void)",
			"bool IsWindowHidden(void)",
			"bool IsWindowMaximized(void)",
			"bool IsWindowMinimized(void)",
			"bool IsWindowReady(void)",
			"bool IsWindowResized(void)",
			"bool IsWindowState(unsigned int flag)",
			"bool OsDoesFileExist(FilePath path)",
			"bool OsDoesFileOrFolderExist(FilePath path, bool* isFolderOut)",
			"bool OsDoesFolderExist(FilePath path)",
			"bool OsIterFileStep(OsFileIter* fileIter, FilePath* pathOut, Arena* pathOutArena, bool giveFullPath)",
			"bool OsOpenFile(Arena* arena, FilePath path, OsOpenFileMode mode, bool calculateSize, OsFile* openFileOut)",
			"bool OsReadFile(FilePath path, Arena* arena, bool convertNewLines, Str8* contentsOut)",
			"bool OsWriteBinFile(FilePath path, Str8 fileContents)",
			"bool OsWriteFile(FilePath path, Str8 fileContents, bool convertNewLines)",
			"bool OsWriteTextFile(FilePath path, Str8 fileContents)",
			"bool OsWriteToOpenBinFile(OsFile* file, Str8 fileContentsPart)",
			"bool OsWriteToOpenFile(OsFile* file, Str8 fileContentsPart, bool convertNewLines)",
			"bool OsWriteToOpenTextFile(OsFile* file, Str8 fileContentsPart)",
			"bool SaveFileData(const char *fileName, void *data, int dataSize)",
			"bool SaveFileText(const char *fileName, char *text)",
			"bool TextIsEqual(const char *text1, const char *text2)",
			"bool WindowShouldClose(void)",
			"char *EncodeDataBase64(const unsigned char *data, int dataSize, int *outputSize)",
			"char *LoadFileText(const char *fileName)",
			"char *LoadUTF8(const int *codepoints, int length)",
			"char *TextInsert(const char *text, const char *insert, int position)",
			"char *TextReplace(const char *text, const char *replace, const char *by)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"char* PrintInArena(Arena* arena, const char* formatString, ...)",
			"const char **TextSplit(const char *text, char delimiter, int *count)",
			"const char *CodepointToUTF8(int codepoint, int *utf8Size)",
			"const char *GetApplicationDirectory(void)",
			"const char *GetClipboardText(void)",
			"const char *GetDirectoryPath(const char *filePath)",
			"const char *GetFileExtension(const char *fileName)",
			"const char *GetFileName(const char *filePath)",
			"const char *GetFileNameWithoutExt(const char *filePath)",
			"const char *GetGamepadName(int gamepad)",
			"const char *GetMonitorName(int monitor)",
			"const char *GetPrevDirectoryPath(const char *dirPath)",
			"const char *GetWorkingDirectory(void)",
			"const char *TextFormat(const char *text, ...)",
			"const char *TextJoin(const char **textList, int count, const char *delimiter)",
			"const char *TextSubtext(const char *text, int position, int length)",
			"const char *TextToCamel(const char *text)",
			"const char *TextToLower(const char *text)",
			"const char *TextToPascal(const char *text)",
			"const char *TextToSnake(const char *text)",
			"const char *TextToUpper(const char *text)",
			"const char* GetDbgLevelStr(DbgLevel enumValue)",
			"const char* GetEasingStyleStr(EasingStyle_t style)",
			"const char* GetErrnoStr(int errnoValue)",
			"const char* GetOsOpenFileModeStr(OsOpenFileMode enumValue)",
			"const char* GetRandomSeriesTypeAcronymStr(RandomSeriesType enumValue)",
			"const char* GetRandomSeriesTypeStr(RandomSeriesType enumValue)",
			"const char* GetVertAttributeTypeStr(VertAttributeType enumValue)",
			"const char* GetVertBufferUsageStr(VertBufferUsage enumValue)",
			"double GetTime(void)",
			"float *LoadWaveSamples(Wave wave)",
			"float GetFrameTime(void)",
			"float GetGamepadAxisMovement(int gamepad, int axis)",
			"float GetGestureDragAngle(void)",
			"float GetGestureHoldDuration(void)",
			"float GetGesturePinchAngle(void)",
			"float GetMasterVolume(void)",
			"float GetMouseWheelMove(void)",
			"float GetMusicTimeLength(Music music)",
			"float GetMusicTimePlayed(Music music)",
			"float TextToFloat(const char *text)",
			"function jsPrintStringLength(labelStrPntr, labelStrLength, strPntr, strLength)",
			"i16 AbsI16(i16 value)",
			"i32 AbsI32(i32 value)",
			"i32 CeilR32i(r32 value)",
			"i32 FloorR32i(r32 value)",
			"i32 I32_FUNC_DEF()",
			"i32 RoundR32i(r32 value)",
			"i64 AbsI64(i64 value)",
			"i64 CeilR64i(r64 value)",
			"i64 FloorR64i(r64 value)",
			"i64 GetRandI64(RandomSeries* series)",
			"i64 RoundR64i(r64 value)",
			"i8 AbsI8(i8 value)",
			"int *LoadCodepoints(const char *text, int *count)",
			"int *LoadRandomSequence(unsigned int count, int min, int max)",
			"int ColorToInt(Color color)",
			"int GetCharPressed(void)",
			"int GetCodepoint(const char *text, int *codepointSize)",
			"int GetCodepointCount(const char *text)",
			"int GetCodepointNext(const char *text, int *codepointSize)",
			"int GetCodepointPrevious(const char *text, int *codepointSize)",
			"int GetCurrentMonitor(void)",
			"int GetFPS(void)",
			"int GetFileLength(const char *fileName)",
			"int GetGamepadAxisCount(int gamepad)",
			"int GetGamepadButtonPressed(void)",
			"int GetGestureDetected(void)",
			"int GetGlyphIndex(Font font, int codepoint)",
			"int GetKeyPressed(void)",
			"int GetMonitorCount(void)",
			"int GetMonitorHeight(int monitor)",
			"int GetMonitorPhysicalHeight(int monitor)",
			"int GetMonitorPhysicalWidth(int monitor)",
			"int GetMonitorRefreshRate(int monitor)",
			"int GetMonitorWidth(int monitor)",
			"int GetMouseX(void)",
			"int GetMouseY(void)",
			"int GetPixelDataSize(int width, int height, int format)",
			"int GetRandomValue(int min, int max)",
			"int GetRenderHeight(void)",
			"int GetRenderWidth(void)",
			"int GetScreenHeight(void)",
			"int GetScreenWidth(void)",
			"int GetShaderLocation(Shader shader, const char *uniformName)",
			"int GetShaderLocationAttrib(Shader shader, const char *attribName)",
			"int GetTouchPointCount(void)",
			"int GetTouchPointId(int index)",
			"int GetTouchX(void)",
			"int GetTouchY(void)",
			"int MakeDirectory(const char *dirPath)",
			"int MeasureText(const char *text, int fontSize)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"int SetGamepadMappings(const char *mappings)",
			"int TextCopy(char *dst, const char *src)",
			"int TextFindIndex(const char *text, const char *find)",
			"int TextToInteger(const char *text)",
			"long GetFileModTime(const char *fileName)",
			"mat3 ToMat3From4(mat4 matrix4)",
			"mat4 ToMat4From3(mat3 matrix3)",
			"quat QuatFromMat3(mat3 matrix3)",
			"r32 AbsR32(r32 value)",
			"r32 AngleDiffR32(r32 left, r32 right)",
			"r32 AngleFixR32(r32 angle)",
			"r32 AngleFlipHorizontalR32(r32 angle, bool normalize)",
			"r32 AngleFlipVerticalR32(r32 angle, bool normalize)",
			"r32 AngleLerpR32(r32 angleFrom, r32 angleTo, r32 amount)",
			"r32 AngleOppositeR32(r32 angle)",
			"r32 CbrtR32(r32 value)",
			"r32 CeilR32(r32 value)",
			"r32 FloorR32(r32 value)",
			"r32 LnR32(r32 value)",
			"r32 Log10R32(r32 value)",
			"r32 Log2R32(r32 value)",
			"r32 ModR32(r32 numerator, r32 denominator)",
			"r32 PowR32(r32 value, r32 power)",
			"r32 RoundR32(r32 value)",
			"r32 SqrtR32(r32 value)",
			"r32 Vec3AngleBetween(v3 vecLeft, v3 vecRight)",
			"r64 AbsR64(r64 value)",
			"r64 AngleDiffR64(r64 left, r64 right)",
			"r64 AngleFixR64(r64 angle)",
			"r64 AngleFlipHorizontalR64(r64 angle, bool normalize)",
			"r64 AngleFlipVerticalR64(r64 angle, bool normalize)",
			"r64 AngleLerpR64(r64 angleFrom, r64 angleTo, r64 amount)",
			"r64 AngleOppositeR64(r64 angle)",
			"r64 CbrtR64(r64 value)",
			"r64 CeilR64(r64 value)",
			"r64 FloorR64(r64 value)",
			"r64 LerpClampR64(r64 val1, r64 val2, r64 amount)",
			"r64 LnR64(r64 value)",
			"r64 Log10R64(r64 value)",
			"r64 Log2R64(r64 value)",
			"r64 ModR64(r64 numerator, r64 denominator)",
			"r64 PowR64(r64 value, r64 power)",
			"r64 RoundR64(r64 value)",
			"r64 SqrtR64(r64 value)",
			"static inline v3 MulMat4AndV3(mat4 matrix4, v3 vec3, bool includeTranslation)",
			"static inline v3 MulMat4AndV3GetW(mat4 matrix4, v3 vec3, bool includeTranslation, r32* wOut)",
			"u8 GetCodepointForUtf8(u64 maxNumBytes, const char* strPntr, u32* codepointOut)",
			"u8 GetCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"unsigned char *CompressData(const unsigned char *data, int dataSize, int *compDataSize)",
			"unsigned char *DecodeDataBase64(const unsigned char *data, int *outputSize)",
			"unsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataSize)",
			"unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize)",
			"unsigned char *LoadFileData(const char *fileName, int *dataSize)",
			"unsigned int *ComputeMD5(unsigned char *data, int dataSize)",
			"unsigned int *ComputeSHA1(unsigned char *data, int dataSize)",
			"unsigned int ComputeCRC32(unsigned char *data, int dataSize)",
			"unsigned int TextLength(const char *text)",
			"uxx ChangePathSlashesTo(FilePath path, char slashType)",
			"uxx CountPathParts(FilePath path, bool includeEmptyBeginOrEnd)",
			"uxx FindNextCharInStr(Str8 target, uxx startIndex, Str8 searchCharsStr)",
			"uxx FindNextCharInStrEx(Str8 target, uxx startIndex, Str8 searchCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextUnknownCharInStr(Str8 target, uxx startIndex, Str8 knownCharsStr)",
			"uxx FindNextUnknownCharInStrEx(Str8 target, uxx startIndex, Str8 knownCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextWhitespaceInStrEx(Str8 target, uxx startIndex, bool ignoreCharsInQuotes)",
			"uxx FixPathSlashes(FilePath path)",
			"uxx GetGreyscaleColorIndex(Color color)",
			"uxx GetGreyscaleColorIndexByValue(u32 colorValue)",
			"uxx GetMonokaiColorIndex(Color color)",
			"uxx GetMonokaiColorIndexByValue(u32 colorValue)",
			"uxx GetPredefPalColorIndex(Color color)",
			"uxx GetPredefPalColorIndexByValue(u32 colorValue)",
			"uxx GetPureColorIndex(Color color)",
			"uxx GetPureColorIndexByValue(u32 colorValue)",
			"v3 Vec3From2Angles(r32 facingDirection, r32 rotationUpDown, r32 radius)",
			"void *GetWindowHandle(void)",
			"void *MemAlloc(unsigned int size)",
			"void *MemRealloc(void *ptr, unsigned int size)",
			"void ARRAY_VISIT_FUNC_DEF(uxx itemIndex, void* item)",
			"void AttachAudioMixedProcessor(AudioCallback processor)",
			"void AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor)",
			"void BeginBlendMode(int mode)",
			"void BeginDrawing(void)",
			"void BeginMode2D(Camera2D camera)",
			"void BeginMode3D(Camera3D camera)",
			"void BeginScissorMode(int x, int y, int width, int height)",
			"void BeginShaderMode(Shader shader)",
			"void BeginTextureMode(RenderTexture2D target)",
			"void BeginVrStereoMode(VrStereoConfig config)",
			"void ClearBackground(Color color)",
			"void ClearWindowState(unsigned int flags)",
			"void CloseAudioDevice(void)",
			"void CloseWindow(void)",
			"void DEBUG_OUTPUT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, const char* message)",
			"void DEBUG_PRINT_HANDLER_DEF(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, const char* formatString, ...)",
			"void DebugPrintRouter(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel level, bool newLine, const char* formatString, ...)",
			"void DetachAudioMixedProcessor(AudioCallback processor)",
			"void DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor)",
			"void DisableCursor(void)",
			"void DisableEventWaiting(void)",
			"void DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float scale, Color tint)",
			"void DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint)",
			"void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint)",
			"void DrawBoundingBox(BoundingBox box, Color color)",
			"void DrawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color)",
			"void DrawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color)",
			"void DrawCircle(int centerX, int centerY, float radius, Color color)",
			"void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color)",
			"void DrawCircleGradient(int centerX, int centerY, float radius, Color inner, Color outer)",
			"void DrawCircleLines(int centerX, int centerY, float radius, Color color)",
			"void DrawCircleLinesV(Vector2 center, float radius, Color color)",
			"void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color)",
			"void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color)",
			"void DrawCircleV(Vector2 center, float radius, Color color)",
			"void DrawCube(Vector3 position, float width, float height, float length, Color color)",
			"void DrawCubeV(Vector3 position, Vector3 size, Color color)",
			"void DrawCubeWires(Vector3 position, float width, float height, float length, Color color)",
			"void DrawCubeWiresV(Vector3 position, Vector3 size, Color color)",
			"void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color)",
			"void DrawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color)",
			"void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color)",
			"void DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color)",
			"void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color)",
			"void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color)",
			"void DrawFPS(int posX, int posY)",
			"void DrawGrid(int slices, float spacing)",
			"void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color)",
			"void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color)",
			"void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color)",
			"void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color)",
			"void DrawLineStrip(const Vector2 *points, int pointCount, Color color)",
			"void DrawLineV(Vector2 startPos, Vector2 endPos, Color color)",
			"void DrawMesh(Mesh mesh, Material material, Matrix transform)",
			"void DrawMeshInstanced(Mesh mesh, Material material, const Matrix *transforms, int instances)",
			"void DrawModel(Model model, Vector3 position, float scale, Color tint)",
			"void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint)",
			"void DrawModelPoints(Model model, Vector3 position, float scale, Color tint)",
			"void DrawModelPointsEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint)",
			"void DrawModelWires(Model model, Vector3 position, float scale, Color tint)",
			"void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint)",
			"void DrawPixel(int posX, int posY, Color color)",
			"void DrawPixelV(Vector2 position, Color color)",
			"void DrawPlane(Vector3 centerPos, Vector2 size, Color color)",
			"void DrawPoint3D(Vector3 position, Color color)",
			"void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color)",
			"void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color)",
			"void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color)",
			"void DrawRay(Ray ray, Color color)",
			"void DrawRectangle(int posX, int posY, int width, int height, Color color)",
			"void DrawRectangleGradientEx(Rectangle rec, Color topLeft, Color bottomLeft, Color topRight, Color bottomRight)",
			"void DrawRectangleGradientH(int posX, int posY, int width, int height, Color left, Color right)",
			"void DrawRectangleGradientV(int posX, int posY, int width, int height, Color top, Color bottom)",
			"void DrawRectangleLines(int posX, int posY, int width, int height, Color color)",
			"void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color)",
			"void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color)",
			"void DrawRectangleRec(Rectangle rec, Color color)",
			"void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color)",
			"void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, Color color)",
			"void DrawRectangleRoundedLinesEx(Rectangle rec, float roundness, int segments, float lineThick, Color color)",
			"void DrawRectangleV(Vector2 position, Vector2 size, Color color)",
			"void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color)",
			"void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color)",
			"void DrawSphere(Vector3 centerPos, float radius, Color color)",
			"void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color)",
			"void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color)",
			"void DrawSplineBasis(const Vector2 *points, int pointCount, float thick, Color color)",
			"void DrawSplineBezierCubic(const Vector2 *points, int pointCount, float thick, Color color)",
			"void DrawSplineBezierQuadratic(const Vector2 *points, int pointCount, float thick, Color color)",
			"void DrawSplineCatmullRom(const Vector2 *points, int pointCount, float thick, Color color)",
			"void DrawSplineLinear(const Vector2 *points, int pointCount, float thick, Color color)",
			"void DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color)",
			"void DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color)",
			"void DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color)",
			"void DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color)",
			"void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color)",
			"void DrawText(const char *text, int posX, int posY, int fontSize, Color color)",
			"void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint)",
			"void DrawTextCodepoints(Font font, const int *codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint)",
			"void DrawTextEx(Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint)",
			"void DrawTextPro(Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint)",
			"void DrawTexture(Texture2D texture, int posX, int posY, Color tint)",
			"void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint)",
			"void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint)",
			"void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint)",
			"void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint)",
			"void DrawTextureV(Texture2D texture, Vector2 position, Color tint)",
			"void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color)",
			"void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color)",
			"void DrawTriangleFan(const Vector2 *points, int pointCount, Color color)",
			"void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color)",
			"void DrawTriangleStrip(const Vector2 *points, int pointCount, Color color)",
			"void DrawTriangleStrip3D(const Vector3 *points, int pointCount, Color color)",
			"void EnableCursor(void)",
			"void EnableEventWaiting(void)",
			"void EndBlendMode(void)",
			"void EndDrawing(void)",
			"void EndMode2D(void)",
			"void EndMode3D(void)",
			"void EndScissorMode(void)",
			"void EndShaderMode(void)",
			"void EndTextureMode(void)",
			"void EndVrStereoMode(void)",
			"void FreeMem(Arena* arena, void* allocPntr, uxx allocSize)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void FreeVarArray(VarArray* array)",
			"void GenMeshTangents(Mesh *mesh)",
			"void GenTextureMipmaps(Texture2D *texture)",
			"void HideCursor(void)",
			"void ImageAlphaClear(Image *image, Color color, float threshold)",
			"void ImageAlphaCrop(Image *image, float threshold)",
			"void ImageAlphaMask(Image *image, Image alphaMask)",
			"void ImageAlphaPremultiply(Image *image)",
			"void ImageBlurGaussian(Image *image, int blurSize)",
			"void ImageClearBackground(Image *dst, Color color)",
			"void ImageColorBrightness(Image *image, int brightness)",
			"void ImageColorContrast(Image *image, float contrast)",
			"void ImageColorGrayscale(Image *image)",
			"void ImageColorInvert(Image *image)",
			"void ImageColorReplace(Image *image, Color color, Color replace)",
			"void ImageColorTint(Image *image, Color color)",
			"void ImageCrop(Image *image, Rectangle crop)",
			"void ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp)",
			"void ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint)",
			"void ImageDrawCircle(Image *dst, int centerX, int centerY, int radius, Color color)",
			"void ImageDrawCircleLines(Image *dst, int centerX, int centerY, int radius, Color color)",
			"void ImageDrawCircleLinesV(Image *dst, Vector2 center, int radius, Color color)",
			"void ImageDrawCircleV(Image *dst, Vector2 center, int radius, Color color)",
			"void ImageDrawLine(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color)",
			"void ImageDrawLineEx(Image *dst, Vector2 start, Vector2 end, int thick, Color color)",
			"void ImageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color)",
			"void ImageDrawPixel(Image *dst, int posX, int posY, Color color)",
			"void ImageDrawPixelV(Image *dst, Vector2 position, Color color)",
			"void ImageDrawRectangle(Image *dst, int posX, int posY, int width, int height, Color color)",
			"void ImageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color)",
			"void ImageDrawRectangleRec(Image *dst, Rectangle rec, Color color)",
			"void ImageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color)",
			"void ImageDrawText(Image *dst, const char *text, int posX, int posY, int fontSize, Color color)",
			"void ImageDrawTextEx(Image *dst, Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint)",
			"void ImageDrawTriangle(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color)",
			"void ImageDrawTriangleEx(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color c1, Color c2, Color c3)",
			"void ImageDrawTriangleFan(Image *dst, Vector2 *points, int pointCount, Color color)",
			"void ImageDrawTriangleLines(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color)",
			"void ImageDrawTriangleStrip(Image *dst, Vector2 *points, int pointCount, Color color)",
			"void ImageFlipHorizontal(Image *image)",
			"void ImageFlipVertical(Image *image)",
			"void ImageFormat(Image *image, int newFormat)",
			"void ImageKernelConvolution(Image *image, const float *kernel, int kernelSize)",
			"void ImageMipmaps(Image *image)",
			"void ImageResize(Image *image, int newWidth, int newHeight)",
			"void ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill)",
			"void ImageResizeNN(Image *image, int newWidth,int newHeight)",
			"void ImageRotate(Image *image, int degrees)",
			"void ImageRotateCCW(Image *image)",
			"void ImageRotateCW(Image *image)",
			"void ImageToPOT(Image *image, Color fill)",
			"void InitArenaAlias(Arena* arenaOut, Arena* sourceArena)",
			"void InitArenaBuffer(Arena* arenaOut, void* bufferPntr, uxx bufferSize)",
			"void InitArenaStack(Arena* arenaOut, uxx stackSize, Arena* sourceArena)",
			"void InitArenaStackVirtual(arena_s* arenaOut, u64 virtualSize)",
			"void InitArenaStackWasm(Arena* arenaOut)",
			"void InitArenaStdHeap(arena_s* arenaOut)",
			"void InitAudioDevice(void)",
			"void InitScratchArenas(uxx stackSizePerArena, Arena* sourceArena)",
			"void InitScratchArenasVirtual(uxx virtualSizePerArena)",
			"void InitWindow(int width, int height, const char *title)",
			"void MaximizeWindow(void)",
			"void MemFree(void *ptr)",
			"void MinimizeWindow(void)",
			"void OpenURL(const char *url)",
			"void OsCloseFile(OsFile* file)",
			"void OsFreeFileIter(OsFileIter* fileIter)",
			"void PauseAudioStream(AudioStream stream)",
			"void PauseMusicStream(Music music)",
			"void PauseSound(Sound sound)",
			"void PlayAudioStream(AudioStream stream)",
			"void PlayAutomationEvent(AutomationEvent event)",
			"void PlayMusicStream(Music music)",
			"void PlaySound(Sound sound)",
			"void PollInputEvents(void)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void ReleaseScratchArena(ScratchArena scratchArena)",
			"void RestoreWindow(void)",
			"void ResumeAudioStream(AudioStream stream)",
			"void ResumeMusicStream(Music music)",
			"void ResumeSound(Sound sound)",
			"void RunWasmStdTests()",
			"void SeekMusicStream(Music music, float position)",
			"void SetAudioStreamBufferSizeDefault(int size)",
			"void SetAudioStreamCallback(AudioStream stream, AudioCallback callback)",
			"void SetAudioStreamPan(AudioStream stream, float pan)",
			"void SetAudioStreamPitch(AudioStream stream, float pitch)",
			"void SetAudioStreamVolume(AudioStream stream, float volume)",
			"void SetAutomationEventBaseFrame(int frame)",
			"void SetAutomationEventList(AutomationEventList *list)",
			"void SetClipboardText(const char *text)",
			"void SetConfigFlags(unsigned int flags)",
			"void SetExitKey(int key)",
			"void SetGamepadVibration(int gamepad, float leftMotor, float rightMotor, float duration)",
			"void SetGesturesEnabled(unsigned int flags)",
			"void SetLoadFileDataCallback(LoadFileDataCallback callback)",
			"void SetLoadFileTextCallback(LoadFileTextCallback callback)",
			"void SetMasterVolume(float volume)",
			"void SetMaterialTexture(Material *material, int mapType, Texture2D texture)",
			"void SetModelMeshMaterial(Model *model, int meshId, int materialId)",
			"void SetMouseCursor(int cursor)",
			"void SetMouseOffset(int offsetX, int offsetY)",
			"void SetMousePosition(int x, int y)",
			"void SetMouseScale(float scaleX, float scaleY)",
			"void SetMusicPan(Music music, float pan)",
			"void SetMusicPitch(Music music, float pitch)",
			"void SetMusicVolume(Music music, float volume)",
			"void SetPixelColor(void *dstPtr, Color color, int format)",
			"void SetRandomSeed(unsigned int seed)",
			"void SetSaveFileDataCallback(SaveFileDataCallback callback)",
			"void SetSaveFileTextCallback(SaveFileTextCallback callback)",
			"void SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType)",
			"void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat)",
			"void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture)",
			"void SetShaderValueV(Shader shader, int locIndex, const void *value, int uniformType, int count)",
			"void SetShapesTexture(Texture2D texture, Rectangle source)",
			"void SetSoundPan(Sound sound, float pan)",
			"void SetSoundPitch(Sound sound, float pitch)",
			"void SetSoundVolume(Sound sound, float volume)",
			"void SetTargetFPS(int fps)",
			"void SetTextLineSpacing(int spacing)",
			"void SetTextureFilter(Texture2D texture, int filter)",
			"void SetTextureWrap(Texture2D texture, int wrap)",
			"void SetTraceLogCallback(TraceLogCallback callback)",
			"void SetTraceLogLevel(int logLevel)",
			"void SetWindowFocused(void)",
			"void SetWindowIcon(Image image)",
			"void SetWindowIcons(Image *images, int count)",
			"void SetWindowMaxSize(int width, int height)",
			"void SetWindowMinSize(int width, int height)",
			"void SetWindowMonitor(int monitor)",
			"void SetWindowOpacity(float opacity)",
			"void SetWindowPosition(int x, int y)",
			"void SetWindowSize(int width, int height)",
			"void SetWindowState(unsigned int flags)",
			"void SetWindowTitle(const char *title)",
			"void ShowCursor(void)",
			"void StartAutomationEventRecording(void)",
			"void StopAudioStream(AudioStream stream)",
			"void StopAutomationEventRecording(void)",
			"void StopMusicStream(Music music)",
			"void StopSound(Sound sound)",
			"void SwapScreenBuffer(void)",
			"void TakeScreenshot(const char *fileName)",
			"void TextAppend(char *text, const char *append, int *position)",
			"void ToggleBorderlessWindowed(void)",
			"void ToggleFullscreen(void)",
			"void TraceLog(int logLevel, const char *text, ...)",
			"void TwoPassPrint(char* resultPntr, u64 resultLength, u64* currentByteIndex, const char* formatString, ...)",
			"void UnloadAudioStream(AudioStream stream)",
			"void UnloadAutomationEventList(AutomationEventList list)",
			"void UnloadCodepoints(int *codepoints)",
			"void UnloadDirectoryFiles(FilePathList files)",
			"void UnloadDroppedFiles(FilePathList files)",
			"void UnloadFileData(unsigned char *data)",
			"void UnloadFileText(char *text)",
			"void UnloadFont(Font font)",
			"void UnloadFontData(GlyphInfo *glyphs, int glyphCount)",
			"void UnloadImage(Image image)",
			"void UnloadImageColors(Color *colors)",
			"void UnloadImagePalette(Color *colors)",
			"void UnloadMaterial(Material material)",
			"void UnloadMesh(Mesh mesh)",
			"void UnloadModel(Model model)",
			"void UnloadModelAnimation(ModelAnimation anim)",
			"void UnloadModelAnimations(ModelAnimation *animations, int animCount)",
			"void UnloadMusicStream(Music music)",
			"void UnloadRandomSequence(int *sequence)",
			"void UnloadRenderTexture(RenderTexture2D target)",
			"void UnloadShader(Shader shader)",
			"void UnloadSound(Sound sound)",
			"void UnloadSoundAlias(Sound alias)",
			"void UnloadTexture(Texture2D texture)",
			"void UnloadUTF8(char *text)",
			"void UnloadVrStereoConfig(VrStereoConfig config)",
			"void UnloadWave(Wave wave)",
			"void UnloadWaveSamples(float *samples)",
			"void UpdateAudioStream(AudioStream stream, const void *data, int frameCount)",
			"void UpdateCamera(Camera *camera, int mode)",
			"void UpdateCameraPro(Camera *camera, Vector3 movement, Vector3 rotation, float zoom)",
			"void UpdateMeshBuffer(Mesh mesh, int index, const void *data, int dataSize, int offset)",
			"void UpdateModelAnimation(Model model, ModelAnimation anim, int frame)",
			"void UpdateModelAnimationBones(Model model, ModelAnimation anim, int frame)",
			"void UpdateMusicStream(Music music)",
			"void UpdateSound(Sound sound, const void *data, int sampleCount)",
			"void UpdateTexture(Texture2D texture, const void *pixels)",
			"void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels)",
			"void UploadMesh(Mesh *mesh, bool dynamic)",
			"void VOID_FUNC_DEF()",
			"void VarArrayClear(VarArray* array)",
			"void VarArrayClearEx(VarArray* array, bool deallocate)",
			"void VarArrayVisit(VarArray* array, ArrayVisitFunc_f* visitFunc)",
			"void WaitTime(double seconds)",
			"void WaveCrop(Wave *wave, int initFrame, int finalFrame)",
			"void WaveFormat(Wave *wave, int sampleRate, int sampleSize, int channels)",
			"void* GetVrInterfaceFnTable(const char* interfaceNameAndVersion)",
			"void* VOID_PNTR_FUNC_DEF()",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AllocFunc_f",
			"Arena",
			"ArrayVisitFunc_f",
			"AudioCallback",
			"AudioStream",
			"AutomationEvent",
			"AutomationEventList",
			"Axis",
			"BlendMode",
			"BoneInfo",
			"BoundingBox",
			"Camera",
			"Camera2D",
			"Camera3D",
			"CameraMode",
			"CameraProjection",
			"Color",
			"ConfigFlags",
			"CubemapLayout",
			"DbgLevel",
			"Dir2",
			"Dir2Ex",
			"Dir3",
			"EasingStyle",
			"FilePath",
			"FilePathList",
			"Font",
			"FontType",
			"FreeFunc_f",
			"GamepadAxis",
			"GamepadButton",
			"Gesture",
			"GlyphInfo",
			"Hash128",
			"Image",
			"ImageData",
			"KeyboardKey",
			"LoadFileDataCallback",
			"LoadFileTextCallback",
			"Material",
			"MaterialMap",
			"MaterialMapIndex",
			"Matrix",
			"Mesh",
			"Model",
			"ModelAnimation",
			"MouseButton",
			"MouseCursor",
			"Music",
			"NPatchInfo",
			"NPatchLayout",
			"OsFile",
			"PixelFormat",
			"Quaternion",
			"RandomSeries",
			"RandomSeriesType",
			"Ray",
			"RayCollision",
			"ReallocFunc_f",
			"Rectangle",
			"RenderTexture",
			"RenderTexture2D",
			"Result",
			"SaveFileDataCallback",
			"SaveFileTextCallback",
			"ScratchArena",
			"Shader",
			"ShaderAttributeDataType",
			"ShaderLocationIndex",
			"ShaderUniformDataType",
			"Sound",
			"Str8Pair",
			"Texture",
			"Texture2D",
			"TextureCubemap",
			"TextureFilter",
			"TextureWrap",
			"TraceLogCallback",
			"TraceLogLevel",
			"Transform",
			"Vector2",
			"Vector3",
			"Vector4",
			"VertAttributeType",
			"VertBufferUsage",
			"VrDeviceInfo",
			"VrStereoConfig",
			"Wave",
			"arena_type_e",
			"bool_func_f",
			"i32_func_f",
			"rAudioBuffer",
			"rAudioProcessor",
			"void_func_f",
			"void_pntr_func_f",
		],
	},
}
