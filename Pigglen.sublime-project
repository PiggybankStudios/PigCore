{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.rdbg",
			],
		},
		{
			"path": "third_party/stb",
			"name": "stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"path": "third_party/raylib/include",
			"name": "raylib",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"ATTR_PACKED",
			"Axis_All2",
			"Axis_All3",
			"Axis_All4",
			"Axis_Count",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BUILD_WITH_RAYLIB",
			"DbgLevel_Count",
			"DbgLevel_Debug",
			"DbgLevel_Error",
			"DbgLevel_Info",
			"DbgLevel_None",
			"DbgLevel_Notify",
			"DbgLevel_Other",
			"DbgLevel_Regular",
			"DbgLevel_Warning",
			"Dir2Ex_All",
			"Dir2Ex_BottomLeft",
			"Dir2Ex_BottomRight",
			"Dir2Ex_Cardinal",
			"Dir2Ex_Count",
			"Dir2Ex_Diagonal",
			"Dir2Ex_Down",
			"Dir2Ex_Left",
			"Dir2Ex_None",
			"Dir2Ex_Right",
			"Dir2Ex_TopLeft",
			"Dir2Ex_TopRight",
			"Dir2Ex_Up",
			"Dir2_All",
			"Dir2_Count",
			"Dir2_Down",
			"Dir2_Left",
			"Dir2_None",
			"Dir2_Right",
			"Dir2_Up",
			"Dir3_All",
			"Dir3_Backward",
			"Dir3_Count",
			"Dir3_Down",
			"Dir3_Forward",
			"Dir3_Left",
			"Dir3_None",
			"Dir3_NotBackward",
			"Dir3_NotDown",
			"Dir3_NotForward",
			"Dir3_NotLeft",
			"Dir3_NotRight",
			"Dir3_NotUp",
			"Dir3_Right",
			"Dir3_Up",
			"EMPTY_STRUCT",
			"END_EXTERN_C",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_EarlyInOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_LogTwoInCustom",
			"EasingStyle_LogTwoOutCustom",
			"EasingStyle_None",
			"EasingStyle_NumStyles",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"HalfPi32",
			"HalfPi64",
			"MEM_ARENA_DEBUG_NAMES",
			"NUM_MONOKAI_COLORS",
			"Pi32",
			"Pi64",
			"QuarterPi32",
			"QuarterPi64",
			"RandomSeriesType_Fixed",
			"RandomSeriesType_Incremental",
			"RandomSeriesType_LinearCongruential32",
			"RandomSeriesType_LinearCongruential64",
			"RandomSeriesType_None",
			"RandomSeriesType_NumTypes",
			"RandomSeriesType_PermutedCongruential64",
			"RandomSeriesType_XoroShiro128",
			"START_EXTERN_C",
			"Sqrt2_32",
			"Sqrt2_64",
			"ThirdPi32",
			"ThirdPi64",
			"ThreeHalfsPi32",
			"ThreeHalfsPi64",
			"TwoPi32",
			"TwoPi64",
			"UNKNOWN_STR",
			"VAR_ARRAY_CLEAR_ITEMS_ON_ADD",
			"VAR_ARRAY_CLEAR_ITEM_BYTE_VALUE",
			"VAR_ARRAY_DEBUG_INFO",
			"VAR_ARRAY_MIN_SIZE",
			"ZEROED",
			"__func__",
			"e32",
			"e64",
		],
		"custom_functions":
		[
			"#define ALLOC_FUNC_DEF(functionName)",
			"#define ArrayCount(Array)",
			"#define Assert(condition)",
			"#define AssertMsg(condition, message)",
			"#define COORD3D_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define COORD3D_X_FROM_INDEX(voxelIndex, arrayWidth)",
			"#define COORD3D_Y_FROM_INDEX(voxelIndex, arrayWidth, arrayDepth)",
			"#define COORD3D_Z_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define DebugAssert(condition)",
			"#define DebugAssertMsg(condition, message)",
			"#define DebugNotNull(variable)",
			"#define DebugStaticAssert(condition)",
			"#define Decrement(variable)",
			"#define DecrementBy(variable, amount)",
			"#define END_PACK()",
			"#define EXPORT(returnType, functionName, ...)",
			"#define FREE_FUNC_DEF(functionName)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define FlipEndianU32(variable)",
			"#define Gigabytes(value)",
			"#define IMPORT(returnType, functionName, ...)",
			"#define INDEX_FROM_COORD3D(coordX, coordY, coordZ, arrayWidth, arrayHeight, arrayDepth)",
			"#define IS_VAR_IN_X_BYTES_OF_STRUCT(structureName, numBytes, variableName)",
			"#define Increment(variable, max)",
			"#define IncrementBy(variable, amount, max)",
			"#define IncrementU16(variable)",
			"#define IncrementU16By(variable, amount)",
			"#define IncrementU32(variable)",
			"#define IncrementU32By(variable, amount)",
			"#define IncrementU64(variable)",
			"#define IncrementU64By(variable, amount)",
			"#define IncrementU8(variable)",
			"#define IncrementU8By(variable, amount)",
			"#define IncrementUXX(variable)",
			"#define IncrementUXXBy(variable, amount)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define Kilobytes(value)",
			"#define Megabytes(value)",
			"#define NotNull(variable)",
			"#define OnesComplimentU32(variable)",
			"#define PACKED(class_to_pack)",
			"#define Plural(number, multipleSuffix)",
			"#define PluralEx(number, singularSuffix, multipleSuffix)",
			"#define REALLOC_FUNC_DEF(functionName)",
			"#define START_PACK()",
			"#define STRINGIFY(text)",
			"#define STRINGIFY_DEFINE(define)",
			"#define STRUCT_VAR_END_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_SIZE(structureName, variableName)",
			"#define SetOptionalOutPntr(outputPntr, value)",
			"#define Terabytes(value)",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define UNREFERENCED(varName)",
			"#define UNUSED(varName)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"Color GetMonokaiColorByIndex(uxx index)",
			"Color GetPredefPalColorByIndex(uxx index)",
			"Color NewColor(u8 red, u8 green, u8 blue, u8 alpha)",
			"Color NewColorU32(u32 valueU32)",
			"Dir2 ToDir2(Axis axis, bool positive)",
			"Dir3 ToDir3(Axis axis, bool positive)",
			"bool BOOL_FUNC_DEF()",
			"bool CanArenaAllocAligned(const Arena* arena)",
			"bool CanArenaCheckPntrFromArena(const Arena* arena)",
			"bool CanArenaFree(const Arena* arena)",
			"bool CanArenaGetSize(const Arena* arena)",
			"bool CanArenaVerifyIntegrity(const Arena* arena)",
			"bool IsInfiniteR32(r32 value)",
			"bool IsInfiniteR64(r64 value)",
			"bool IsPntrFromArena(const Arena* arena, const void* allocPntr)",
			"bool IsVarArrayInit(const VarArray* array)",
			"const char* GetDbgLevelStr(DbgLevel enumValue)",
			"const char* GetEasingStyleStr(EasingStyle_t style)",
			"const char* GetRandomSeriesTypeAcronymStr(RandomSeriesType enumValue)",
			"const char* GetRandomSeriesTypeStr(RandomSeriesType enumValue)",
			"i16 AbsI16(i16 value)",
			"i32 AbsI32(i32 value)",
			"i32 CeilR32i(r32 value)",
			"i32 FloorR32i(r32 value)",
			"i32 I32_FUNC_DEF()",
			"i32 RoundR32i(r32 value)",
			"i64 AbsI64(i64 value)",
			"i64 CeilR64i(r64 value)",
			"i64 FloorR64i(r64 value)",
			"i64 GetRandI64(RandomSeries* series)",
			"i64 RoundR64i(r64 value)",
			"i8 AbsI8(i8 value)",
			"r32 AbsR32(r32 value)",
			"r32 AngleDiffR32(r32 left, r32 right)",
			"r32 AngleFixR32(r32 angle)",
			"r32 AngleFlipHorizontalR32(r32 angle, bool normalize)",
			"r32 AngleFlipVerticalR32(r32 angle, bool normalize)",
			"r32 AngleLerpR32(r32 angleFrom, r32 angleTo, r32 amount)",
			"r32 AngleOppositeR32(r32 angle)",
			"r32 CbrtR32(r32 value)",
			"r32 CeilR32(r32 value)",
			"r32 FloorR32(r32 value)",
			"r32 LnR32(r32 value)",
			"r32 Log10R32(r32 value)",
			"r32 Log2R32(r32 value)",
			"r32 ModR32(r32 numerator, r32 denominator)",
			"r32 PowR32(r32 value, r32 power)",
			"r32 RoundR32(r32 value)",
			"r32 SqrtR32(r32 value)",
			"r64 AbsR64(r64 value)",
			"r64 AngleDiffR64(r64 left, r64 right)",
			"r64 AngleFixR64(r64 angle)",
			"r64 AngleFlipHorizontalR64(r64 angle, bool normalize)",
			"r64 AngleFlipVerticalR64(r64 angle, bool normalize)",
			"r64 AngleLerpR64(r64 angleFrom, r64 angleTo, r64 amount)",
			"r64 AngleOppositeR64(r64 angle)",
			"r64 CbrtR64(r64 value)",
			"r64 CeilR64(r64 value)",
			"r64 FloorR64(r64 value)",
			"r64 LerpClampR64(r64 val1, r64 val2, r64 amount)",
			"r64 LnR64(r64 value)",
			"r64 Log10R64(r64 value)",
			"r64 Log2R64(r64 value)",
			"r64 ModR64(r64 numerator, r64 denominator)",
			"r64 PowR64(r64 value, r64 power)",
			"r64 RoundR64(r64 value)",
			"r64 SqrtR64(r64 value)",
			"uxx GetGreyscaleColorIndex(Color color)",
			"uxx GetGreyscaleColorIndexByValue(u32 colorValue)",
			"uxx GetMonokaiColorIndex(Color color)",
			"uxx GetMonokaiColorIndexByValue(u32 colorValue)",
			"uxx GetPredefPalColorIndex(Color color)",
			"uxx GetPredefPalColorIndexByValue(u32 colorValue)",
			"uxx GetPureColorIndex(Color color)",
			"uxx GetPureColorIndexByValue(u32 colorValue)",
			"void ARRAY_VISIT_FUNC_DEF(uxx itemIndex, void* item)",
			"void FreeMem(Arena* arena, void* allocPntr, uxx allocSize)",
			"void FreeVarArray(VarArray* array)",
			"void InitArenaAlias(Arena* arenaOut, Arena* sourceArena)",
			"void InitArenaBuffer(Arena* arenaOut, void* bufferPntr, uxx bufferSize)",
			"void InitArenaStackVirtual(arena_s* arenaOut, u64 virtualSize)",
			"void InitArenaStdHeap(arena_s* arenaOut)",
			"void VOID_FUNC_DEF()",
			"void VarArrayClear(VarArray* array)",
			"void VarArrayClearEx(VarArray* array, bool deallocate)",
			"void VarArrayVisit(VarArray* array, ArrayVisitFunc_f* visitFunc)",
			"void* VOID_PNTR_FUNC_DEF()",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AllocFunc_f",
			"Arena",
			"ArrayVisitFunc_f",
			"Axis",
			"DbgLevel",
			"Dir2",
			"Dir2Ex",
			"Dir3",
			"EasingStyle",
			"FreeFunc_f",
			"RandomSeries",
			"RandomSeriesType",
			"ReallocFunc_f",
			"arena_type_e",
			"bool_func_f",
			"i32_func_f",
			"void_func_f",
			"void_pntr_func_f",
		],
	},
}
