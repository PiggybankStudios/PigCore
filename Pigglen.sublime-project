{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.rdbg",
			],
		},
		{
			"path": "third_party/stb",
			"name": "stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"ATTR_PACKED",
			"EMPTY_STRUCT",
			"END_EXTERN_C",
			"HalfPi32",
			"HalfPi64",
			"MEM_ARENA_DEBUG_NAMES",
			"Pi32",
			"Pi64",
			"QuarterPi32",
			"QuarterPi64",
			"START_EXTERN_C",
			"Sqrt2_32",
			"Sqrt2_64",
			"ThirdPi32",
			"ThirdPi64",
			"ThreeHalfsPi32",
			"ThreeHalfsPi64",
			"TwoPi32",
			"TwoPi64",
			"UNKNOWN_STR",
			"VAR_ARRAY_CLEAR_ITEMS_ON_ADD",
			"VAR_ARRAY_CLEAR_ITEM_BYTE_VALUE",
			"VAR_ARRAY_DEBUG_INFO",
			"VAR_ARRAY_MIN_SIZE",
			"ZEROED",
			"__func__",
			"e32",
			"e64",
		],
		"custom_functions":
		[
			"#define ALLOC_FUNC_DEF(functionName)",
			"#define ArrayCount(Array)",
			"#define Assert(condition)",
			"#define AssertMsg(condition, message)",
			"#define COORD3D_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define COORD3D_X_FROM_INDEX(voxelIndex, arrayWidth)",
			"#define COORD3D_Y_FROM_INDEX(voxelIndex, arrayWidth, arrayDepth)",
			"#define COORD3D_Z_FROM_INDEX(voxelIndex, arrayWidth, arrayHeight, arrayDepth)",
			"#define DebugAssert(condition)",
			"#define DebugAssertMsg(condition, message)",
			"#define DebugNotNull(variable)",
			"#define DebugStaticAssert(condition)",
			"#define Decrement(variable)",
			"#define DecrementBy(variable, amount)",
			"#define END_PACK()",
			"#define EXPORT(returnType, functionName, ...)",
			"#define FREE_FUNC_DEF(functionName)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define FlipEndianU32(variable)",
			"#define Gigabytes(value)",
			"#define IMPORT(returnType, functionName, ...)",
			"#define INDEX_FROM_COORD3D(coordX, coordY, coordZ, arrayWidth, arrayHeight, arrayDepth)",
			"#define IS_VAR_IN_X_BYTES_OF_STRUCT(structureName, numBytes, variableName)",
			"#define Increment(variable, max)",
			"#define IncrementBy(variable, amount, max)",
			"#define IncrementU16(variable)",
			"#define IncrementU16By(variable, amount)",
			"#define IncrementU32(variable)",
			"#define IncrementU32By(variable, amount)",
			"#define IncrementU64(variable)",
			"#define IncrementU64By(variable, amount)",
			"#define IncrementU8(variable)",
			"#define IncrementU8By(variable, amount)",
			"#define IncrementUXX(variable)",
			"#define IncrementUXXBy(variable, amount)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define Kilobytes(value)",
			"#define Megabytes(value)",
			"#define NotNull(variable)",
			"#define OnesComplimentU32(variable)",
			"#define PACKED(class_to_pack)",
			"#define Plural(number, multipleSuffix)",
			"#define PluralEx(number, singularSuffix, multipleSuffix)",
			"#define REALLOC_FUNC_DEF(functionName)",
			"#define START_PACK()",
			"#define STRINGIFY(text)",
			"#define STRINGIFY_DEFINE(define)",
			"#define STRUCT_VAR_END_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_SIZE(structureName, variableName)",
			"#define SetOptionalOutPntr(outputPntr, value)",
			"#define Terabytes(value)",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define UNREFERENCED(varName)",
			"#define UNUSED(varName)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"bool BOOL_FUNC_DEF()",
			"bool CanArenaAllocAligned(const Arena* arena)",
			"bool CanArenaCheckPntrFromArena(const Arena* arena)",
			"bool CanArenaFree(const Arena* arena)",
			"bool CanArenaGetSize(const Arena* arena)",
			"bool CanArenaVerifyIntegrity(const Arena* arena)",
			"bool IsPntrFromArena(const Arena* arena, const void* allocPntr)",
			"bool IsVarArrayInit(const VarArray* array)",
			"i32 I32_FUNC_DEF()",
			"void ARRAY_VISIT_FUNC_DEF(uxx itemIndex, void* item)",
			"void FreeMem(Arena* arena, void* allocPntr, uxx allocSize)",
			"void FreeVarArray(VarArray* array)",
			"void InitArenaAlias(Arena* arenaOut, Arena* sourceArena)",
			"void InitArenaBuffer(Arena* arenaOut, void* bufferPntr, uxx bufferSize)",
			"void InitArenaStackVirtual(arena_s* arenaOut, u64 virtualSize)",
			"void InitArenaStdHeap(arena_s* arenaOut)",
			"void VOID_FUNC_DEF()",
			"void VarArrayClear(VarArray* array)",
			"void VarArrayClearEx(VarArray* array, bool deallocate)",
			"void VarArrayVisit(VarArray* array, ArrayVisitFunc_f* visitFunc)",
			"void* VOID_PNTR_FUNC_DEF()",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AllocFunc_f",
			"Arena",
			"ArrayVisitFunc_f",
			"FreeFunc_f",
			"ReallocFunc_f",
			"arena_type_e",
			"bool_func_f",
			"i32_func_f",
			"void_func_f",
			"void_pntr_func_f",
		],
	},
}
